{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst shortid = require('shortid');\nconst app = express();\nconst port = 8000;\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost/url-shortener', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Create URL schema\nconst urlSchema = new mongoose.Schema({\n  originalUrl: String,\n  shortUrl: String\n});\n\n// Create URL model\nconst Url = mongoose.model('Url', urlSchema);\n\n// Middleware to parse JSON requests\napp.use(express.json());\n\n// Route to create short URL\napp.post('/api/shorten', async (req, res) => {\n  const {\n    originalUrl\n  } = req.body;\n  // Generate a short URL using shortid library\n  const shortUrl = shortid.generate();\n  // Create a new URL document\n  const url = new Url({\n    originalUrl,\n    shortUrl\n  });\n  await url.save();\n  res.json(url);\n});\n\n// Route to redirect to original URL\napp.get('/:shortUrl', async (req, res) => {\n  const {\n    shortUrl\n  } = req.params;\n  // Find the URL document by short URL\n  const url = await Url.findOne({\n    shortUrl\n  });\n  if (!url) {\n    return res.status(404).json({\n      error: 'URL not found'\n    });\n  }\n  res.redirect(url.originalUrl);\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","shortid","app","port","connect","useNewUrlParser","useUnifiedTopology","urlSchema","Schema","originalUrl","String","shortUrl","Url","model","use","json","post","req","res","body","generate","url","save","get","params","findOne","status","error","redirect","listen","console","log"],"sources":["C:/Users/alex0/Desktop/MVP-Project/mvp-project/client/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst shortid = require('shortid');\r\nconst app = express();\r\nconst port = 8000;\r\n\r\n// Connect to MongoDB\r\nmongoose.connect('mongodb://localhost/url-shortener', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// Create URL schema\r\nconst urlSchema = new mongoose.Schema({\r\n  originalUrl: String,\r\n  shortUrl: String,\r\n});\r\n\r\n// Create URL model\r\nconst Url = mongoose.model('Url', urlSchema);\r\n\r\n// Middleware to parse JSON requests\r\napp.use(express.json());\r\n\r\n// Route to create short URL\r\napp.post('/api/shorten', async (req, res) => {\r\n  const { originalUrl } = req.body;\r\n  // Generate a short URL using shortid library\r\n  const shortUrl = shortid.generate();\r\n  // Create a new URL document\r\n  const url = new Url({ originalUrl, shortUrl });\r\n  await url.save();\r\n  res.json(url);\r\n});\r\n\r\n// Route to redirect to original URL\r\napp.get('/:shortUrl', async (req, res) => {\r\n  const { shortUrl } = req.params;\r\n  // Find the URL document by short URL\r\n  const url = await Url.findOne({ shortUrl });\r\n  if (!url) {\r\n    return res.status(404).json({ error: 'URL not found' });\r\n  }\r\n  res.redirect(url.originalUrl);\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;;AAEjB;AACAH,QAAQ,CAACI,OAAO,CAAC,mCAAmC,EAAE;EACpDC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAG,IAAIP,QAAQ,CAACQ,MAAM,CAAC;EACpCC,WAAW,EAAEC,MAAM;EACnBC,QAAQ,EAAED;AACZ,CAAC,CAAC;;AAEF;AACA,MAAME,GAAG,GAAGZ,QAAQ,CAACa,KAAK,CAAC,KAAK,EAAEN,SAAS,CAAC;;AAE5C;AACAL,GAAG,CAACY,GAAG,CAAChB,OAAO,CAACiB,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAb,GAAG,CAACc,IAAI,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,MAAM;IAAET;EAAY,CAAC,GAAGQ,GAAG,CAACE,IAAI;EAChC;EACA,MAAMR,QAAQ,GAAGV,OAAO,CAACmB,QAAQ,CAAC,CAAC;EACnC;EACA,MAAMC,GAAG,GAAG,IAAIT,GAAG,CAAC;IAAEH,WAAW;IAAEE;EAAS,CAAC,CAAC;EAC9C,MAAMU,GAAG,CAACC,IAAI,CAAC,CAAC;EAChBJ,GAAG,CAACH,IAAI,CAACM,GAAG,CAAC;AACf,CAAC,CAAC;;AAEF;AACAnB,GAAG,CAACqB,GAAG,CAAC,YAAY,EAAE,OAAON,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEP;EAAS,CAAC,GAAGM,GAAG,CAACO,MAAM;EAC/B;EACA,MAAMH,GAAG,GAAG,MAAMT,GAAG,CAACa,OAAO,CAAC;IAAEd;EAAS,CAAC,CAAC;EAC3C,IAAI,CAACU,GAAG,EAAE;IACR,OAAOH,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEY,KAAK,EAAE;IAAgB,CAAC,CAAC;EACzD;EACAT,GAAG,CAACU,QAAQ,CAACP,GAAG,CAACZ,WAAW,CAAC;AAC/B,CAAC,CAAC;;AAEF;AACAP,GAAG,CAAC2B,MAAM,CAAC1B,IAAI,EAAE,MAAM;EACrB2B,OAAO,CAACC,GAAG,CAAE,6BAA4B5B,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}